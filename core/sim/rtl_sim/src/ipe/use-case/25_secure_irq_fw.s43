.include "pmem_defs.asm"

.set __IPE_CUSTOM_IVT, 1
.include "../src-c/framework/libipe/stubs/ipe-protected-irq.s"

    .global main
    .sect .data
stack:
    .word 0, 0, 0, 0
    .space 100

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Main test harness, unprotected code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    .sect .text
main:
    mov #stack+50, r1

    mov #__ipe_start_shift, &MPUIPSEGB1
    mov #__ipe_end_shift, &MPUIPSEGB2
    mov #0x0060, &MPUIPC0

    bis.b #0x01, &IE1 ; enable watchdog interrupts
    mov #0x5a3b, &WDTCTL ; configure watchdog

    eint
    mov #0x4, &TACTL
    mov #0x4, &TACCR0
    mov #0x216, &TACTL

    ; delaying the execution for the interrupts to arrive
.rept 8
    nop
.endr

    mov #0, r7
    call #ipe_entry

end_of_test:
    nop
    br #0xffff


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IPE configuration struct (left empty)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    .sect .ipestruct, "a"
.word 1, 2, 3, 4


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IPE single entry point dispatch table (usually generated)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    .global ecall_table
    .global max_ecall_index
    .sect ".ipe_const", "a"
    .align 2
ecall_table:
    .word main_ipe_fn
    .word 0

max_ecall_index:
    .word 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IPE main function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    .sect .ipe_func, "a"
main_ipe_fn:
    mov #0x4, &TACTL
    mov #0x4, &TACCR0
    mov #0x216, &TACTL
    eint

.rept 8
    nop
.endr

    bis.b #0x01, &IE1 ; enable watchdog interrupts
    mov #0x5a3b, &WDTCTL ; configure watchdog
    eint

    ; delaying the execution for the interrupts to arrive
.rept 64
    nop
.endr
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IPE ISR for watchdog interrupts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    .sect .ipe:_isr
trusted_wdt_handler:
    dint
    bic.b #0x01, &IE1
    mov #0x5a88, &WDTCTL
    nop
    reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TIMER_A handler in untrusted code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    .section .text
    .global untrusted_isr

untrusted_isr:
    mov #0, &TACTL
    nop
    reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Trampoline code to IPE in untrusted code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; trusted ISR will return to untrusted trampoline to execute `reti`, which
    ; will return here because of the "fake" stack entries
untrusted_cont:
    pop_all_regs

    ; return to originally interrupted instruction
    reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IPE interrupt vector table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    .global __irq_trampoline
    .section .ipe_vectors, "a"
.word ipe_irq_trampoline_0  ; Interrupt  0 (lowest priority)    <unused>
.word ipe_irq_trampoline_1  ; Interrupt  1                      <unused>
.word ipe_irq_trampoline_2  ; Interrupt  2                      <unused>
.word ipe_irq_trampoline_3  ; Interrupt  3                      <unused>
.word ipe_irq_trampoline_4  ; Interrupt  4                      <unused>
.word ipe_irq_trampoline_5  ; Interrupt  5                      <unused>
.word ipe_irq_trampoline_6  ; Interrupt  6                      <unused>
.word ipe_irq_trampoline_7  ; Interrupt  7                      <unused>
.word __irq_trampoline  ; Interrupt  8                      <unused>
.word ipe_irq_trampoline_9  ; Interrupt  9                      <unused>
.word trusted_wdt_handler   ; Interrupt 10                      Watchdog timer
.word ipe_irq_trampoline_11 ; Interrupt 11                      <unused>
.word ipe_irq_trampoline_12 ; Interrupt 12                      <unused>
.word ipe_irq_trampoline_13 ; Interrupt 13                      <unused>
.word ipe_irq_trampoline_14 ; Interrupt 14                      NMI
.word ipe_irq_trampoline_15 ; Interrupt 15 (highest priority)   RESET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Unprotected interrupt vector table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.section .vectors, "a"
.word end_of_test    ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test    ; Interrupt  1                      <unused>
.word end_of_test    ; Interrupt  2                      <unused>
.word end_of_test    ; Interrupt  3                      <unused>
.word end_of_test    ; Interrupt  4                      <unused>
.word end_of_test    ; Interrupt  5                      <unused>
.word end_of_test    ; Interrupt  6                      <unused>
.word end_of_test    ; Interrupt  7                      <unused>
.word untrusted_isr  ; Interrupt  8                      <unused>
.word end_of_test    ; Interrupt  9                      <unused>
.word untrusted_cont    ; Interrupt 10                      Watchdog timer
.word end_of_test    ; Interrupt 11                      <unused>
.word end_of_test    ; Interrupt 12                      <unused>
.word end_of_test    ; Interrupt 13                      <unused>
.word end_of_test    ; Interrupt 14                      NMI
.word main           ; Interrupt 15 (highest priority)   RESET
