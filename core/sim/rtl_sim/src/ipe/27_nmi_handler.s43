; If the NMI handler (or any other interrupt handler) is set to point to inside
; IPE, the CPU still can't jump there from untrusted code.

.include "pmem_defs.asm"

    .global main
    .sect .text
main:
    mov #0x0800, &MPUIPSEGB1
    mov #0x0810, &MPUIPSEGB2
    mov #0x0060, &MPUIPC0
    mov #0xcafe, r12
    br #first

        /* ----------------------         END OF TEST        --------------- */
end_of_test:
    nop
    br #0xffff

    .sect .ipestruct, "a"
struct:
    .word 1, 2, 3, 4

    .sect .ipe_hw_entry, "a"
entry_point:
    mov #42, r13
first:
    mov #42, r14
    mov #42, r14
    mov #42, r14
    mov #42, r14
    mov #42, r14
illegal_location:
    mov #42, r15
    br #end_of_test

        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test    ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test    ; Interrupt  1                      <unused>
.word end_of_test    ; Interrupt  2                      <unused>
.word end_of_test    ; Interrupt  3                      <unused>
.word end_of_test    ; Interrupt  4                      <unused>
.word end_of_test    ; Interrupt  5                      <unused>
.word end_of_test    ; Interrupt  6                      <unused>
.word end_of_test    ; Interrupt  7                      <unused>
.word end_of_test    ; Interrupt  8                      <unused>
.word end_of_test    ; Interrupt  9                      <unused>
.word end_of_test    ; Interrupt 10                      Watchdog timer
.word end_of_test    ; Interrupt 11                      <unused>
.word end_of_test    ; Interrupt 12                      <unused>
.word end_of_test    ; Interrupt 13                      <unused>
.word illegal_location    ; Interrupt 14                      NMI
rst_vector:
.word main           ; Interrupt 15 (highest priority)   RESET
